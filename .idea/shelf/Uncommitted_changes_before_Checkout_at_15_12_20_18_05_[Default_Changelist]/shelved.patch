Index: app/src/main/java/com/piwniczna/mojakancelaria/activities/clients/clients_list/ClientsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.piwniczna.mojakancelaria.activities.clients.clients_list\n\nimport android.app.AlertDialog\nimport android.graphics.drawable.ColorDrawable\nimport android.os.AsyncTask\nimport android.os.Bundle\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.ImageButton\nimport android.widget.ListView\nimport androidx.appcompat.app.ActionBar\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app.Fragment\nimport com.piwniczna.mojakancelaria.DB.DataService\nimport com.piwniczna.mojakancelaria.Models.ClientEntity\nimport com.piwniczna.mojakancelaria.R\nimport com.piwniczna.mojakancelaria.activities.archives.clients.ArchivalClientsFragment\nimport com.piwniczna.mojakancelaria.activities.cases.cases_list.CasesFragment\nimport com.piwniczna.mojakancelaria.activities.clients.add_client.AddClientFragment\nimport com.piwniczna.mojakancelaria.utils.SpannedText\n\nclass ClientsFragment: Fragment() {\n    lateinit var clientsListAdapter: ClientsListAdapter\n    lateinit var clientsListView : ListView\n    lateinit var clientsList: ArrayList<ClientEntity>\n    lateinit var searchClientsEditText: EditText\n    lateinit var dbService: DataService\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val view = inflater.inflate(R.layout.fragment_clients, container, false)\n        dbService = DataService(this.context!!)\n\n        val addButton = view.findViewById<Button>(R.id.add_client_button)\n        addButton.setOnClickListener { handleAddClient(it) }\n\n        val archivesButton = view.findViewById<ImageButton>(R.id.archives_button)\n        archivesButton.setOnClickListener { handleOpenArchives(it) }\n\n        clientsListView = view.findViewById(R.id.clients_list_view) as ListView\n        clientsList = arrayListOf()\n        clientsListAdapter = ClientsListAdapter(this.context!!, clientsList)\n        clientsListView.adapter = clientsListAdapter\n\n        clientsListView.setOnItemClickListener { _, _, position, _ ->\n            openClientCasesFragment(position)\n        }\n\n        clientsListView.setOnItemLongClickListener { _, _, position, id ->\n            archiveClient(position, id)\n            true\n        }\n\n        searchClientsEditText = view.findViewById(R.id.search_clients_edittext)\n        searchClientsEditText.addTextChangedListener(object : TextWatcher {\n\n            override fun afterTextChanged(s: Editable) {}\n\n            override fun beforeTextChanged(s: CharSequence, start: Int,\n                                           count: Int, after: Int) {\n            }\n\n            override fun onTextChanged(s: CharSequence, start: Int,\n                                       before: Int, count: Int) {\n                clientsListAdapter.filter.filter(s)\n            }\n        })\n\n        getClientsFromDB()\n\n        val bar = getActionbar()\n        bar!!.setBackgroundDrawable(ColorDrawable(this.context!!.resources.getColor(R.color.dark_blue)))\n        bar!!.setTitle(\"Moja Kancelaria\")\n\n        return view\n    }\n\n    fun getActionbar() : ActionBar?\n    {\n        return (activity as AppCompatActivity).supportActionBar\n    }\n\n    private fun getClientsFromDB() {\n        AsyncTask.execute {\n            val clients = dbService.getClients()\n            clientsList.clear()\n            clientsList.addAll(clients)\n            activity?.runOnUiThread {\n                clientsListAdapter.notifyDataSetChanged()\n            }\n        }\n    }\n\n    private fun archiveClient(position: Int, id: Long) {\n        AsyncTask.execute {\n            var client = clientsListAdapter.data[position]\n            val casesList = dbService.getCases(client)\n            client.id += 1\n            casesList.addAll(dbService.getCases(client))\n            client.id -=1\n\n            if (casesList.size == 0){\n                activity?.runOnUiThread {\n                    val builder = AlertDialog.Builder(this.context)\n                    val clientName = clientsListAdapter.data[position].name\n                    val message =\n                        SpannedText.getSpannedText(getString(R.string.delete_client, clientName))\n\n                    builder.setTitle(R.string.warning)\n                    builder.setMessage(message)\n\n                    builder.setPositiveButton(\"Usuń\") { dialog, which ->\n                        Log.e(\"xd\",\"xdd\")\n                        deleteClient(client)\n\n                    }\n\n                    builder.setNegativeButton(R.string.cancel) { dialog, which -> }\n\n                    builder.show()\n                }\n\n            }\n            else {\n                activity?.runOnUiThread {\n                    val builder = AlertDialog.Builder(this.context)\n                    val clientName = clientsListAdapter.data[position].name\n                    val message =\n                        SpannedText.getSpannedText(getString(R.string.archive_client, clientName))\n\n                    builder.setTitle(R.string.warning)\n                    builder.setMessage(message)\n\n                    builder.setPositiveButton(\"Przenieś\") { dialog, which ->\n\n                        builder.setTitle(\"Przenoszenie klienta do archiwum\")\n                        builder.setMessage(R.string.are_you_sure)\n\n                        builder.setPositiveButton(R.string.yes) { dialog, which -> moveClientToArchive(position)\n                        }\n\n                        builder.setNegativeButton(R.string.no) { dialog, which -> }\n\n                        builder.show()\n\n                    }\n\n                    builder.setNegativeButton(R.string.cancel) { dialog, which -> }\n\n                    builder.show()\n                }\n            }\n        }\n\n    }\n\n    private fun moveClientToArchive(position: Int) {\n        AsyncTask.execute {\n            dbService.deleteClient(clientsList[position])\n            getClientsFromDB()\n        }\n    }\n\n    private fun deleteClient(client: ClientEntity){\n        AsyncTask.execute {\n            dbService.deleteClient(client)\n            client.id += 1\n            dbService.deleteArchivalClient(client)\n            getClientsFromDB()\n        }\n    }\n\n    private fun handleAddClient(view: View) {\n        fragmentManager?.beginTransaction()?.replace(\n                R.id.fragment_container,\n                AddClientFragment()\n        )?.commit()\n    }\n\n    private fun handleOpenArchives(view: View) {\n        fragmentManager?.beginTransaction()?.replace(\n            R.id.fragment_container,\n            ArchivalClientsFragment()\n        )?.commit()\n    }\n\n    private fun openClientCasesFragment(clientPosition: Int) {\n        fragmentManager?.beginTransaction()?.replace(\n                R.id.fragment_container,\n                CasesFragment(clientsList[clientPosition])\n        )?.commit()\n    }\n\n    fun onBackPressed() {\n        val builder = AlertDialog.Builder(context)\n        builder.setTitle(R.string.warning)\n        builder.setMessage(\"Czy chcesz wyjść z aplikacji?\")\n\n        builder.setPositiveButton(\"Tak\") { dialog, which -> exit() }\n\n        builder.setNegativeButton(R.string.cancel) { dialog, which -> }\n\n        builder.show()\n\n    }\n\n    fun exit() {\n        this.activity?.finishAffinity()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/piwniczna/mojakancelaria/activities/clients/clients_list/ClientsFragment.kt	(revision 0c13400afd7e698c0c56bac8fbba3889414a5948)
+++ app/src/main/java/com/piwniczna/mojakancelaria/activities/clients/clients_list/ClientsFragment.kt	(date 1608041446000)
@@ -115,7 +115,6 @@
                     builder.setMessage(message)
 
                     builder.setPositiveButton("Usuń") { dialog, which ->
-                        Log.e("xd","xdd")
                         deleteClient(client)
 
                     }
