Index: app/src/main/java/com/piwniczna/mojakancelaria/activities/payments/add_payment/AddPaymentFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.piwniczna.mojakancelaria.activities.payments.add_payment\n\nimport android.app.AlertDialog\nimport android.app.DatePickerDialog\nimport android.app.Dialog\nimport android.os.AsyncTask\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.Window\nimport android.widget.*\nimport androidx.fragment.app.Fragment\nimport com.piwniczna.mojakancelaria.DB.DataService\nimport com.piwniczna.mojakancelaria.Models.ClientEntity\nimport com.piwniczna.mojakancelaria.Models.ObligationEntity\nimport com.piwniczna.mojakancelaria.Models.PaymentEntity\nimport com.piwniczna.mojakancelaria.Models.RelationEntity\nimport com.piwniczna.mojakancelaria.R\nimport com.piwniczna.mojakancelaria.activities.clients.ObligationsFragment\nimport com.piwniczna.mojakancelaria.activities.payments.payments_list.PaymentsFragment\nimport com.piwniczna.mojakancelaria.utils.SpannedText\nimport com.piwniczna.mojakancelaria.utils.Validator\nimport java.math.BigDecimal\nimport java.time.LocalDate\n\nclass AddPaymentFragment(var client: ClientEntity): Fragment() {\n    lateinit var nameEditText : EditText\n    lateinit var amountEditText: EditText\n    lateinit var dateButton: Button\n    lateinit var addObligationButton: Button\n    lateinit var obligationsListView: ListView\n    lateinit var relationsList: ArrayList<RelationEntity>\n    lateinit var obligationsList: ArrayList<ObligationEntity>\n    lateinit var obligationsListAdapter: ObligationsOfPaymentListAdapter\n    lateinit var addButton: Button\n    lateinit var summaryTextView: TextView\n    lateinit var dbService: DataService\n    var amountToSpend = BigDecimal(0)\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val view = inflater.inflate(R.layout.fragment_add_new_payment, container, false)\n\n        dbService = DataService(this.context!!)\n\n        nameEditText = view.findViewById(R.id.new_payment_name_edittext)\n        dateButton = view.findViewById(R.id.payment_date_button)\n        addObligationButton = view.findViewById(R.id.add_obligation_to_payment_button)\n        obligationsListView = view.findViewById(R.id.obligations_of_payment_list_view)\n        addButton = view.findViewById(R.id.save_payment_button)\n        summaryTextView = view.findViewById(R.id.summary_payed)\n\n        amountEditText = view.findViewById(R.id.new_payment_amount_edittext)\n        amountEditText.setOnClickListener {\n            if (relationsList.size > 0) {\n                val text = getString(R.string.cannot_edit_amount)\n                toastMessage(text)\n            }\n        }\n\n        addObligationButton.setOnClickListener { handleAddObligation(it) }\n        addButton.setOnClickListener {handleSavePayment(it)}\n        dateButton.setOnClickListener {handleOpenCalendar(it)}\n\n        relationsList = arrayListOf()\n        obligationsList = arrayListOf()\n        obligationsListAdapter = ObligationsOfPaymentListAdapter(this.context!!, relationsList, dbService, activity!!)\n        obligationsListView.adapter = obligationsListAdapter\n\n        obligationsListView.setOnItemLongClickListener { _, _, position, _ ->\n            deletePayedObligation(position)\n            true\n        }\n\n        return view\n    }\n\n    fun onBackPressed() {\n        fragmentManager?.beginTransaction()?.replace(\n                R.id.fragment_container,\n                PaymentsFragment(client)\n        )?.commit()\n    }\n\n    private fun handleAddObligation(view: View) {\n        if(!Validator.validateAmount(amountEditText.text.toString(), this.context!!, activity?.applicationContext)) {\n            val text = getString(R.string.cannot_add_obligation_without_amount)\n            toastMessage(text)\n            return\n        }\n\n        amountToSpend = countAmountToSpend()\n\n        if (amountToSpend.compareTo(BigDecimal(0))==0){\n            val text = getString(R.string.cannot_add_obligation_when_nothing_to_spend)\n            toastMessage(text)\n            return\n        }\n        var dialog = Dialog(this.context!!)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.setCancelable(false)\n        dialog.setContentView(R.layout.layout_dialog_add_obligation_to_payment)\n\n        val cancelButton = dialog.findViewById(R.id.adding_obligation_to_payment_cancel_button) as Button\n        cancelButton.setOnClickListener {\n            dialog.dismiss()\n        }\n\n        var obligationsToChoose = arrayListOf<ObligationEntity>()\n        val obligationsToChooseListView = dialog.findViewById(R.id.obligations_to_choose_list_view) as ListView\n        val obligationsToChooseListAdapter = ObligationsToChooseListAdapter(this.context!!, obligationsToChoose)\n        obligationsToChooseListView.adapter = obligationsToChooseListAdapter\n\n        getObligationsToPay(obligationsToChoose, obligationsToChooseListAdapter)\n        \n        obligationsToChooseListView.setOnItemClickListener { _, _, position, _ ->\n            dialog.dismiss()\n            handleChooseObligation(obligationsToChoose[position])\n        }\n\n        dialog.show()\n    }\n\n    private fun handleChooseObligation(obligation: ObligationEntity) {\n        var dialog = Dialog(this.context!!)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.setCancelable(false)\n        dialog.setContentView(R.layout.layout_dialog_pay_obligation)\n\n        val obligationAmountEditText = dialog.findViewById<EditText>(R.id.pay_obligation_amount_edittext)\n        var amountPrompt = \"\"\n        if (amountToSpend.compareTo(obligation.amount.minus(obligation.payed))==-1){\n            amountPrompt = amountToSpend.toString()\n        }\n        else{\n            amountPrompt = obligation.amount.minus(obligation.payed).toString()\n        }\n\n        obligationAmountEditText.setText(amountPrompt)\n\n        val leftToBeSpendTextView = dialog.findViewById<TextView>(R.id.left_to_be_spend_text_view)\n        leftToBeSpendTextView.text = getString(R.string.left_to_be_spend, amountToSpend.setScale(2).toString())\n\n\n        val amountToPayLabelTextView = dialog.findViewById<TextView>(R.id.amount_to_pay_label_text_view)\n        amountToPayLabelTextView.setText( SpannedText.getSpannedText(\n                getString(\n                        R.string.amount_to_pay_label,\n                        obligation.name.toUpperCase(),\n                        obligation.payed.setScale(2).toString(),\n                        obligation.amount.setScale(2).toString())))\n\n\n        val saveButton = dialog.findViewById<Button>(R.id.pay_obligation_save_button)\n        saveButton.setOnClickListener {\n            if(!Validator.validateAmount(obligationAmountEditText.text.toString(), this.context!!, activity?.applicationContext)) {\n                val text = getString(R.string.wrong_amount)\n                toastMessage(text)\n            }\n            else if(BigDecimal(obligationAmountEditText.text.toString()).compareTo(obligation.amount.minus(obligation.payed))==1){\n                val text = getString(R.string.too_large_amount)\n                toastMessage(text)\n            }\n            else if(BigDecimal(obligationAmountEditText.text.toString()).compareTo(countAmountToSpend())==1){\n                val text = getString(R.string.amount_bigger_than_left)\n                toastMessage(text)\n            }\n            else{\n                addPayedObligation(obligation, BigDecimal(obligationAmountEditText.text.toString()))\n                dialog.dismiss()\n\n                setSummaryText()\n            }\n        }\n\n        val cancelButton = dialog.findViewById<Button>(R.id.pay_obligation_cancel_button)\n        cancelButton.setOnClickListener {\n            dialog.dismiss()\n        }\n\n        dialog.show()\n    }\n\n    private fun setSummaryText() {\n        val toSpend = countAmountToSpend()\n        val wholeAmount = BigDecimal(amountEditText.text.toString())\n        summaryTextView.setText(getString(R.string.payed_amount_with_currency,wholeAmount.minus(toSpend).setScale(2).toString(),wholeAmount.setScale(2).toString()))\n    }\n\n    private fun addPayedObligation(obligation: ObligationEntity, amount: BigDecimal) {\n        relationsList.add(RelationEntity(amount, client.id, obligation.id, 0))\n        obligationsList.add(obligation)\n        if (relationsList.size > 0) {\n            disableEditText(amountEditText)\n        }\n        obligationsListAdapter.notifyDataSetChanged()\n    }\n\n    private fun deletePayedObligation(position: Int) {\n        val builder = AlertDialog.Builder(this.context)\n        val message = getString(\n                R.string.are_you_sure_delete_payed_obligation,\n                getString(R.string.amount_with_currency,relationsList[position].amount.setScale(2).toString()),\n                obligationsList[position].name\n                )\n\n        builder.setTitle(R.string.warning)\n        builder.setMessage(message)\n\n        builder.setPositiveButton(R.string.delete) { _, _ ->\n            relationsList.removeAt(position)\n            obligationsList.removeAt(position)\n            if (relationsList.size == 0) {\n                enableEditText(amountEditText)\n            }\n            setSummaryText()\n            obligationsListAdapter.notifyDataSetChanged()\n        }\n\n        builder.setNegativeButton(R.string.cancel) { _, _ -> }\n\n        builder.show()\n    }\n\n    private fun disableEditText(editText: EditText){\n        editText.isFocusable = false\n        editText.isClickable = true\n\n    }\n\n    private fun enableEditText(editText: EditText) {\n        editText.isFocusable = true\n        editText.isFocusableInTouchMode = true\n    }\n    \n    private fun countAmountToSpend(): BigDecimal {\n        var amount = BigDecimal(amountEditText.text.toString())\n        for( o in relationsList){\n            amount = amount.minus(o.amount)\n        }\n        if (amount.compareTo(BigDecimal(0)) == -1) {\n            return BigDecimal(-1)\n        }\n        return amount\n    }\n\n    private fun getObligationsToPay(obligations: ArrayList<ObligationEntity>, listAdapter: ObligationsToChooseListAdapter) {\n        AsyncTask.execute{\n            val ob = dbService.getNotPayedObligations(client.id)\n            obligations.clear()\n            for (obligation in ob) {\n                if(!obligationsList.contains(obligation)) {\n                    obligations.add(obligation)\n                }\n            }\n            activity?.runOnUiThread {\n                listAdapter.notifyDataSetChanged()\n            }\n        }\n    }\n\n    private fun handleSavePayment(view: View) {\n        if (!validateData()) {\n            return\n        }\n        val date = dateButton.text.toString()\n        val payment = PaymentEntity(\n                client.id,\n                nameEditText.text.toString(),\n                BigDecimal(amountEditText.text.toString()),\n                LocalDate.of(date.split('/')[2].toInt(),date.split('/')[1].toInt(),date.split('/')[0].toInt()))\n        val amountList = arrayListOf<BigDecimal>()\n        for (rel in relationsList) {\n            amountList.add(rel.amount)\n        }\n\n        savePaymentToDB(payment, amountList)\n\n        fragmentManager?.beginTransaction()?.replace(\n                R.id.fragment_container,\n                PaymentsFragment(client)\n        )?.commit()\n    }\n\n    private fun savePaymentToDB(payment: PaymentEntity, amountList: ArrayList<BigDecimal>) {\n        AsyncTask.execute {\n            dbService.addPayment(payment,obligationsList, amountList)\n        }\n    }\n\n    private fun handleOpenCalendar(view: View) {\n        val date = LocalDate.now()\n        val day = date.dayOfMonth\n        val month = date.monthValue\n        val year = date.year\n\n        // date picker dialog\n        val picker = DatePickerDialog(\n                this.context!!,\n                DatePickerDialog.OnDateSetListener { view, year, monthOfYear, dayOfMonth ->\n                    dateButton.text = dayOfMonth.toString() + \"/\" + (monthOfYear + 1) + \"/\" + year\n                },\n                year,\n                month-1,\n                day\n        )\n        picker.show()\n    }\n\n    private fun validateData() : Boolean{\n        var text = \"\"\n        if (nameEditText.text.toString() == \"\"){\n            text = getString(R.string.name_not_provided)\n        }\n        else if (amountEditText.text.toString() == \"\" || BigDecimal(amountEditText.text.toString()).compareTo(BigDecimal(0))!=1 ){\n            text = getString(R.string.wrong_amount)\n        }\n        else if (dateButton.text.toString() == getString(R.string.payment_date)){\n            text = getString(R.string.date_not_provided)\n        }\n        else if (countAmountToSpend().compareTo(BigDecimal.ZERO)!=0){\n            text = getString(R.string.money_left)\n        }\n        else{\n            return true\n        }\n\n        // TODO: check obligations list\n\n        toastMessage(text)\n        return false\n    }\n\n    private fun toastMessage(message: String) {\n        val duration = Toast.LENGTH_LONG\n        val toast = Toast.makeText(activity?.applicationContext, message, duration)\n        toast.show()\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/piwniczna/mojakancelaria/activities/payments/add_payment/AddPaymentFragment.kt	(revision a92c3d0a21f35db52ecd0630ac5244e455a401f9)
+++ app/src/main/java/com/piwniczna/mojakancelaria/activities/payments/add_payment/AddPaymentFragment.kt	(date 1607783510000)
@@ -326,8 +326,6 @@
             return true
         }
 
-        // TODO: check obligations list
-
         toastMessage(text)
         return false
     }
